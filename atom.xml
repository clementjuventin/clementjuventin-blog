<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://clementjuventin.github.io/</id>
    <title>Clément Juventin Blog</title>
    <updated>2025-06-03T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://clementjuventin.github.io/"/>
    <subtitle>Clément Juventin Blog</subtitle>
    <icon>https://clementjuventin.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Building an Arbitrage Bot]]></title>
        <id>https://clementjuventin.github.io/building-an-arbitrager</id>
        <link href="https://clementjuventin.github.io/building-an-arbitrager"/>
        <updated>2025-06-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I've been fascinated by MEV (Maximal Extractable Value) for a while now, and over the past few weeks, I’ve started building my own arbitrage bot. It’s been a challenging yet insightful journey, and I’d like to share my experience so far.]]></summary>
        <content type="html"><![CDATA[<p>I've been fascinated by MEV (Maximal Extractable Value) for a while now, and over the past few weeks, I’ve started building my own arbitrage bot. It’s been a challenging yet insightful journey, and I’d like to share my experience so far.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="what-is-mev">What is MEV?<a href="https://clementjuventin.github.io/building-an-arbitrager#what-is-mev" class="hash-link" aria-label="Direct link to What is MEV?" title="Direct link to What is MEV?">​</a></h2>
<p>People trade funds, people watch them trading funds, people found ways to make profits based on funds being traded.
To be honest, this is not today's topic, and it's a very vast field. To learn more, <a href="https://www.coingecko.com/learn/what-is-mev-maximal-extractable-value-crypto" target="_blank" rel="noopener noreferrer">this article may help you</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="starting-with-the-basics">Starting with the Basics<a href="https://clementjuventin.github.io/building-an-arbitrager#starting-with-the-basics" class="hash-link" aria-label="Direct link to Starting with the Basics" title="Direct link to Starting with the Basics">​</a></h2>
<p>To begin this adventure, I decided to explore the implementation of a <strong>CowSwap solver</strong>.</p>
<p>For those unfamiliar, <a href="https://cow.fi/cow-protocol" target="_blank" rel="noopener noreferrer">CowSwap</a> is an off-chain order book where solvers <strong>compete to submit the most efficient on-chain settlement</strong>. Since all solvers use the same underlying liquidity sources, the competition lies less in speed or on-chain monitoring tricks, and more in <strong>algorithmic quality</strong> (from what I understand).</p>
<p>I figured this would be a great way to get hands-on experience with arbitrage using real-world tools, while also learning from the CowSwap ecosystem itself.</p>
<p>Unfortunately, that turned out to be a bit optimistic. The competitiveness of an arbitrage system is deeply tied to its performance — which means that sharing strategies often <strong>undermines profitability</strong>. So, I quickly realized that there wouldn’t be much help available when it came to solving the core problems.</p>
<p>That said, I followed CowSwap’s documentation closely and was able to get the full local stack up and running, including syncing with the live order book.</p>
<p>I chose to implement my solver in <strong>C++</strong> — for once, it wasn’t overkill. I was surprised to find I was already familiar with many of the liquidity models: <strong>Uniswap V2/V3</strong>, <strong>Balancer’s stable and weighted pools</strong>, and a few others. The remaining pool types seemed negligible.</p>
<h3 class="anchor anchorWithStickyNavbar_m2y2" id="then-the-real-challenge-hit">Then the Real Challenge Hit<a href="https://clementjuventin.github.io/building-an-arbitrager#then-the-real-challenge-hit" class="hash-link" aria-label="Direct link to Then the Real Challenge Hit" title="Direct link to Then the Real Challenge Hit">​</a></h3>
<p>The complexity came when I had to actually <strong>write the algorithm</strong> — and I had no clear direction. Neither the documentation nor any online resource offered much guidance.</p>
<p>An ideal solver algorithm would likely involve:</p>
<ul>
<li><strong>Graph theory</strong>, to identify optimal trade paths</li>
<li><strong>Game theory</strong>, to balance solver profitability with order competitiveness</li>
<li><strong>Mathematical modeling</strong>, to simulate off-chain liquidity movements</li>
<li>Handling <strong>limit orders</strong>, <strong>partial orders</strong>, and other edge cases</li>
</ul>
<p>In short, this problem is likely <strong>NP-complete</strong>, requiring advanced algorithms and a deep mathematical foundation. I had just thrown myself headfirst into the deep end of arbitrage complexity.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="can-you-still-get-results-without-a-phd-team">Can You Still Get Results Without a PhD Team?<a href="https://clementjuventin.github.io/building-an-arbitrager#can-you-still-get-results-without-a-phd-team" class="hash-link" aria-label="Direct link to Can You Still Get Results Without a PhD Team?" title="Direct link to Can You Still Get Results Without a PhD Team?">​</a></h2>
<p>That’s the question I began asking myself. Is it possible to <strong>simplify the problem</strong> and/or <strong>reduce the level of competition</strong>? It was clear that I had no chance to compete with the big players, even after a few months of development.</p>
<p>One idea came to mind: target a <strong>newer blockchain</strong> — one that’s less mature in terms of ecosystem and developer tooling. That would mean less competition, and maybe a better learning ground.</p>
<h3 class="anchor anchorWithStickyNavbar_m2y2" id="enter-hyperevm">Enter HyperEVM<a href="https://clementjuventin.github.io/building-an-arbitrager#enter-hyperevm" class="hash-link" aria-label="Direct link to Enter HyperEVM" title="Direct link to Enter HyperEVM">​</a></h3>
<p>My search led me to <strong>HyperEVM</strong>, a relatively new EVM-compatible blockchain developed by <a href="https://hyperliquid.gitbook.io/hyperliquid-docs" target="_blank" rel="noopener noreferrer"><strong>Hyperliquid</strong></a>. It felt like stepping into the Wild West.</p>
<p>Why <strong>HyperEVM</strong> was promising:</p>
<ul>
<li><strong>Low gas fees</strong></li>
<li><strong>Modest but exploitable trading volume</strong></li>
<li><strong>EVM compatibility</strong> (making integration much easier)</li>
<li><strong>Fewer active arbitrage bots</strong>, due to its early-stage ecosystem</li>
</ul>
<p>So I began roughing out a system that could serve as an arbitrage bot on this new chain. I’ll describe the different directions I explored to improve the bot’s profitability. I experimented as much as I could and tried to learn by doing, testing every idea that seemed viable.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="the-adventure-begins">The Adventure Begins<a href="https://clementjuventin.github.io/building-an-arbitrager#the-adventure-begins" class="hash-link" aria-label="Direct link to The Adventure Begins" title="Direct link to The Adventure Begins">​</a></h2>
<p>Choosing an EVM-compatible chain seemed like a great idea — in theory, it would allow me to port this system to any other EVM-compatible chain later on. In practice, though, things turned out to be more complicated due to protocols specificities.</p>
<h3 class="anchor anchorWithStickyNavbar_m2y2" id="the-first-proof-of-concept">The First Proof of Concept<a href="https://clementjuventin.github.io/building-an-arbitrager#the-first-proof-of-concept" class="hash-link" aria-label="Direct link to The First Proof of Concept" title="Direct link to The First Proof of Concept">​</a></h3>
<p>To build my proof of concept (PoC), I needed a few key components:</p>
<ul>
<li>Fast access to on-chain data</li>
<li>Off-chain liquidity simulation for Uniswap-like pools</li>
<li>The ability to send on-chain transactions with protection against slippage</li>
</ul>
<p>I started with a <strong>QuickNode RPC</strong>, but quickly hit the 200 requests/sec limit. That capped me at monitoring roughly 30 pools during testing.</p>
<p>I integrated <a href="https://hyperswap.exchange/" target="_blank" rel="noopener noreferrer"><strong>Hyperswap</strong></a> and <a href="https://kittenswap.finance/" target="_blank" rel="noopener noreferrer"><strong>Kittenswap</strong></a>, the two most active DEXs on <strong>HyperEVM</strong>.</p>
<p>My first approach, somewhat naive, was to look for arbitrage loops that start and end with the same token. That way, there's no need to rely on price approximations (e.g., A → B → A or A → B → C → A). I deployed a smart contract capable of executing multiple swaps and reverting if the final balance was lower than the initial one. This ensure that the bot will never spend more than it earns.</p>
<div class="language-solidity codeBlockContainer_AfQF theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_oi8h"><pre tabindex="0" class="prism-code language-solidity codeBlock_o8hW thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_kW6b"><span class="token-line" style="color:#393A34"><span class="token plain">function execute(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Trade[] calldata trades,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uint256 amountIn,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    address startToken</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) external payable returns (uint256) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uint256 balanceBefore = IERC20(startToken).balanceOf(address(this));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // ... perform trades ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uint256 balanceAfter = IERC20(startToken).balanceOf(address(this));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // This line will revert all the previous operations and stop the execution</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    require(balanceAfter &gt; balanceBefore, "Arbitrage failed");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return balanceAfter - balanceBefore;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>In TypeScript, I implemented functions to compute expected token outputs for Uniswap V2 and approximated Uniswap V3 swaps — V3 is more complex due to its tick system while V2 is pretty straightforward.</p>
<p>To detect arbitrage opportunities, I wrote a simple brute force algorithm that computes the best arbitrage path for a given input amount.</p>
<p>I decided to hardcode the input amount to 1 HYPE, and to ignore the gas cost of the transaction because it was extremely low at the time.</p>
<h3 class="anchor anchorWithStickyNavbar_m2y2" id="the-first-result">The First Result<a href="https://clementjuventin.github.io/building-an-arbitrager#the-first-result" class="hash-link" aria-label="Direct link to The First Result" title="Direct link to The First Result">​</a></h3>
<p>With everything wired up, I ran the bot, stepped away for 20 minutes… and came back to see my <strong>first profitable transaction — about $0.30</strong> at the time.</p>
<p><img decoding="async" loading="lazy" alt="First Arbitrage Transaction" src="https://clementjuventin.github.io/assets/images/first_arbitrage_tx-e91e9886c9e4027798c09a7a6711b8cb.jpg" width="1044" height="248" class="img_Gz92"></p>
<blockquote>
<p>My first arbitrage transaction on HyperEVM. Source <a href="https://purrsec.com/tx/0x710e7c9dd53dad1aa3cb15b3225eb1b777a3b230a750e4a36f1d4eb9de17e87e" target="_blank" rel="noopener noreferrer">Purrsec</a>.</p>
</blockquote>
<p>It was a small gain, but a huge morale boost. At that point, I believed I was close to a viable system. With a dedicated node and estimated infrastructure costs around $100/month, profitability seemed achievable.</p>
<p><strong>Spoiler</strong>: I still had a long road ahead. Competition would ramp up quickly in the days to come. But in hindsight, that initial optimism was crucial — if I had only focused on the months of work and potential financial losses ahead, I might have stopped right there.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="moving-toward-production">Moving Toward Production<a href="https://clementjuventin.github.io/building-an-arbitrager#moving-toward-production" class="hash-link" aria-label="Direct link to Moving Toward Production" title="Direct link to Moving Toward Production">​</a></h2>
<p>So far, here's a diagram of my architecture — each module is explained below.</p>
<p><img decoding="async" loading="lazy" alt="Architecture" src="https://clementjuventin.github.io/assets/images/arbitrager_archi-6bd40f6f2dbd597645e6e6a2a3bef9c4.png" width="1167" height="598" class="img_Gz92"></p>
<blockquote>
<p>Colors are just here to make things prettier 👌​.</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_m2y2" id="hyperevm-custom-node">HyperEVM Custom Node<a href="https://clementjuventin.github.io/building-an-arbitrager#hyperevm-custom-node" class="hash-link" aria-label="Direct link to HyperEVM Custom Node" title="Direct link to HyperEVM Custom Node">​</a></h3>
<p>My first step toward production was setting up <strong>a local node</strong>. This gave me full on-chain access with low latency and no rate limits. I didn't follow the advice from the documentation, which recommended using a node in Japan to reduce latency issues, even though it was cheaper in the US. I eventually switched and ended up losing several days syncing the node with a machine in Tokyo due to latency issues.</p>
<h3 class="anchor anchorWithStickyNavbar_m2y2" id="cold-data-indexer">Cold data Indexer<a href="https://clementjuventin.github.io/building-an-arbitrager#cold-data-indexer" class="hash-link" aria-label="Direct link to Cold data Indexer" title="Direct link to Cold data Indexer">​</a></h3>
<p>I needed a way to cache persistent data (e.g., token names, decimals, pool tokens). So I wrote an <strong>indexer that stores data in Redis</strong>, refreshed periodically.</p>
<h3 class="anchor anchorWithStickyNavbar_m2y2" id="solvers">Solvers<a href="https://clementjuventin.github.io/building-an-arbitrager#solvers" class="hash-link" aria-label="Direct link to Solvers" title="Direct link to Solvers">​</a></h3>
<p>Each solver receives a request from the driver and solves a graph to find arbitrage paths. Initially, this logic was in <strong>JavaScript</strong> for rapid prototyping. Later, I migrated to <strong>C++</strong>, which was 80x faster on average — crucial when tracking many pools. It is the same brute force algorithm I used in the PoC.</p>
<div class="language-cpp codeBlockContainer_AfQF theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_oi8h"><pre tabindex="0" class="prism-code language-cpp codeBlock_o8hW thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_kW6b"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">find_best_arbitrage_cycle</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">vector</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">vector</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> Api</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">LiquidityPoolTradePath </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">all_cycles</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> Api</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">uint256 amount_in</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Api</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">uint256 </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">best_amount_out</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">vector</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> Api</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">LiquidityPoolTradePath </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">best_cycle</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">auto</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">cycle </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> all_cycles</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> Api</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">uint256 amount_out </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">compute_cycle_amount_out</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">cycle</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> amount_in</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">amount_out </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> best_amount_out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        best_amount_out </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> amount_out</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        best_cycle </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> cycle</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Math</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">InvalidLiquidityStateError </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">exception </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">cout </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Error: "</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">what</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> std</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token plain">endl</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>Note that I was heavily inspired by CowSwap. It was important for me to design the system with multiple solvers from the start, as this would allow for horizontal scaling of the solving process, as well as safe comparison of different algorithms — since each solution is evaluated and put in competition with the others.</p>
<h3 class="anchor anchorWithStickyNavbar_m2y2" id="monitoring">Monitoring<a href="https://clementjuventin.github.io/building-an-arbitrager#monitoring" class="hash-link" aria-label="Direct link to Monitoring" title="Direct link to Monitoring">​</a></h3>
<p>To monitor performance, I built a metrics indexer that feeds <strong>Prometheus</strong>, which powers <strong>Grafana</strong> dashboards.</p>
<p>To be honest, I under-invested here. I'm still missing key insights and can’t precisely track profit/loss over time. The idea was to compare strategies and versions of the arbitrage engine, but I’ve mostly been busy building essential features.</p>
<p>You can see in the following screenshot that this allows me to visualize the increase in the contract's balances (due to arbitrage activity) and the amount of HYPE available to cover transaction fees for the wallets responsible for calling the arbitrageur.</p>
<p><img decoding="async" loading="lazy" alt="Grafana dashboard" src="https://clementjuventin.github.io/assets/images/arbitrager_dashboard-1a12f4d1c7a4d4161f3be43d77919c3d.png" width="1098" height="763" class="img_Gz92"></p>
<blockquote>
<p>Grafana dashboard (with a bug regarding BTC decimals).</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_m2y2" id="driver">Driver<a href="https://clementjuventin.github.io/building-an-arbitrager#driver" class="hash-link" aria-label="Direct link to Driver" title="Direct link to Driver">​</a></h3>
<p>I built a central coordination module called the <strong>Driver</strong> (also inspired by CowSwap’s architecture). It’s responsible for:</p>
<ul>
<li>High-frequency data collection</li>
<li>Structuring the data into a standard request format</li>
<li>Sending requests to all available solvers</li>
<li>Collecting and evaluating responses within a strict timeout</li>
<li>Comparing the results to determine the best solver and submit the transaction</li>
</ul>
<p>Simulating gas cost and submitting transactions reliably was another challenge. I eventually introduced a dynamic fee deduction, setting aside a portion of profit to cover validator fees and ensure transaction inclusion. I am still not convinced with this approach, but I have no better idea for now.</p>
<p>Thanks to the strategy of using multiple solvers, I was able to narrow down the list of cryptocurrencies used to initiate arbitrage cycles. This increases the number of opportunities, as it allows for shorter arbitrage loops.</p>
<p>For example, a cycle like A → B → C → B → A can be shortened to B → C → B, saving two transactions if the contract already holds B.</p>
<p>Responses are evaluated and filtered — in the PoC, I hardcoded the input token amount to 1 HYPE, which was suboptimal. Profits vary significantly depending on input size.</p>
<p>To omptimize the input size estimation, I tried different strategies:</p>
<h4 class="anchor anchorWithStickyNavbar_m2y2" id="offchain-computation">Offchain computation<a href="https://clementjuventin.github.io/building-an-arbitrager#offchain-computation" class="hash-link" aria-label="Direct link to Offchain computation" title="Direct link to Offchain computation">​</a></h4>
<p>Off-chain calculation is fast and reliable — if you have accurate models and complete data. For Uniswap V2, the math is simple. For V3, it’s <a href="https://uniswapv3book.com/index.html" target="_blank" rel="noopener noreferrer"><strong>evil</strong></a>.</p>
<p>In the PoC, I used a rough approximation to avoid tick-level math. To compute real outputs with Uniswap V3's SDK, you need <strong>all tick data</strong>, which is extremely resource-intensive — even with a private node.</p>
<p>My idea was to fetch a subset of ticks because arbitrage transactions are often low-volume. I managed to code the math but the delays were still significant when it came to fetch the data. I finally gave up this approach for the next strategy.</p>
<h4 class="anchor anchorWithStickyNavbar_m2y2" id="onchain-computation">Onchain computation<a href="https://clementjuventin.github.io/building-an-arbitrager#onchain-computation" class="hash-link" aria-label="Direct link to Onchain computation" title="Direct link to Onchain computation">​</a></h4>
<p>Instead of fully computing everything off-chain, I opted for a hybrid approach:</p>
<ul>
<li>Approximate swaps using a constant-tick assumption (ie. Uniswap V3 math approximation)</li>
<li>Collect all promising trade paths</li>
<li>Simulate each candidate on-chain via a custom smart contract (a read-only call)</li>
<li>Use binary search (dichotomy) to find the input amount that maximizes profit</li>
</ul>
<p>This approach is based on the fact that the data is available, but communication between the driver and the node results in significant latency. Even when both programs run on the same machine, each request still has to go through the full network stack. Since tick retrieval can't be properly parallelized, fetch times become a bottleneck.</p>
<p>Instead, the node is tasked with simulating a smart contract execution. This way, it uses the same math as the actual contracts (eliminating the risk of errors) and has direct, optimized access to its own data.</p>
<p>This gave me much better results while avoiding heavy off-chain computation. Here is a snippet of the binary search function, it returns the optimal <code>k</code> value (ie. the best amount) to maximize the profit:</p>
<div class="language-sol codeBlockContainer_AfQF theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_oi8h"><pre tabindex="0" class="prism-code language-sol codeBlock_o8hW thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_kW6b"><span class="token-line" style="color:#393A34"><span class="token plain">function binarySearchOptimalK(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Trade[] calldata trades,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uint256 step,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uint256 balance</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) internal returns (uint256) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uint256 low_k = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uint256 high_k = balance / step;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    while (low_k &lt; high_k) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        uint256 mid_k = low_k + (high_k - low_k) / 2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        uint256 profitMid = computeTradesProfit(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            trades,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            mid_k * step</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        uint256 profitNext = computeTradesProfit(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            trades,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            (mid_k + 1) * step</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (profitMid &gt;= profitNext) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            high_k = mid_k;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            low_k = mid_k + 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return low_k;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>And this is <strong>costless</strong> because I am <strong>simulating</strong> this call (even though it's a write function).</p>
<h3 class="anchor anchorWithStickyNavbar_m2y2" id="smart-contract-module">Smart Contract Module<a href="https://clementjuventin.github.io/building-an-arbitrager#smart-contract-module" class="hash-link" aria-label="Direct link to Smart Contract Module" title="Direct link to Smart Contract Module">​</a></h3>
<p>My first smart contract was simple, and it worked well initially.
The main purpose is to prevent the bot to concretely loose funds (e.g. Spend 1 A and obtain 0.98 A).</p>
<p>But as my whole bot system matured, it became clear that the contract was <strong>critical to profitability</strong>.</p>
<p>Profit calculation is straightforward: <code>profit = total_output - total_input - gas_cost</code>.</p>
<p>But when a transaction fails, you still pay the gas — often due to a competing bot front-running your trade.
These failed transactions became increasingly costly due to the gas price increasing of a ~500x factor (HyperEVM became more popular).</p>
<p><img decoding="async" loading="lazy" alt="HyperEVM daily transactions" src="https://clementjuventin.github.io/assets/images/hyperevm_daily_tx-ab99180f9688d4016c4f006371b2d2e3.png" width="934" height="562" class="img_Gz92"></p>
<blockquote>
<p>HyperEVM daily transactions. Source <a href="https://purrsec.com/trending/metrics" target="_blank" rel="noopener noreferrer">Purrsec</a>.</p>
</blockquote>
<p>To mitigate this:</p>
<ul>
<li>I optimized gas usage with basic Solidity gas optimizations</li>
<li>Introduced an early-exit condition before the final balance comparison (<code>balanceAfter &lt; balanceBefore</code>)</li>
<li>Tweaked execution to minimize unnecessary operations</li>
</ul>
<p>This lowered the average cost per trade significantly, but not enough.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="current-results--next-steps">Current Results &amp; Next Steps<a href="https://clementjuventin.github.io/building-an-arbitrager#current-results--next-steps" class="hash-link" aria-label="Direct link to Current Results &amp; Next Steps" title="Direct link to Current Results &amp; Next Steps">​</a></h2>
<p>As of now, the bot is not yet profitable. On average, I recover only ~80% of the input.</p>
<p>To bridge the gap to profitability, I have two main ideas:</p>
<ul>
<li>Reduce fees further</li>
<li>Use heuristics to detect and avoid unprofitable trades</li>
</ul>
<p>The second option seems most promising — I haven’t explored it yet, and it requires a larger dataset to analyze trade outcomes at scale. I'll need to analyze all trades performed and hopefully find patterns that reduce the number of failed transactions.</p>
<p>Also, I face a new challenge: <strong>latency</strong>.</p>
<p>Block time on HyperEVM has dropped to under 1 second (2 seconds originally). Because my experiments run from a machine in US, network latency to the HyperEvm sequencers (hosted in Tokyo) is hurting my competitiveness.</p>
<p>I’ll need a new setup — ideally a server located closer to the sequencer region — to reduce latency and stay in sync.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="final-thoughts">Final Thoughts<a href="https://clementjuventin.github.io/building-an-arbitrager#final-thoughts" class="hash-link" aria-label="Direct link to Final Thoughts" title="Direct link to Final Thoughts">​</a></h2>
<p>There’s still a long road ahead, but I believe it’s worth it. I’ve learned a ton about arbitrage, on-chain mechanics, and smart contract optimization — and I’m only getting started.</p>]]></content>
        <author>
            <name>Clément Juventin</name>
            <uri>https://linkedin.com/in/clément-juventin-ab81841a3/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[From A Nooby Degen to a Bloodthirsty Sniper]]></title>
        <id>https://clementjuventin.github.io/degen-to-sniper</id>
        <link href="https://clementjuventin.github.io/degen-to-sniper"/>
        <updated>2025-03-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this article I'd like to recount my first steps as a degen and what prompted me to turn to the world of sniping.]]></summary>
        <content type="html"><![CDATA[<p>In this article I'd like to recount my first steps as a degen and what prompted me to turn to the world of sniping.</p>
<p>Up until recently, I had always kept an eye on the web3 and blockchain space from a distance. I followed the news, attended events and conferences, and got to know many of the key players who set the <strong>foundations and rules of the ecosystem</strong>.</p>
<p>But there was always this one group that felt almost mythical to me — the <strong>degens</strong>. A close friend of mine was part of what I used to label as the degen community. He belonged to private groups focused on <strong>alpha leaks, technical collaboration, and all sorts of niche financial services</strong>. For a long time, it all seemed a bit unproductive to me from a personal growth standpoint, so I kept my distance.</p>
<p>Over time, however, I began to realize that beyond the financial aspect, there was a real sense of connection — a network that could be nurtured and leveraged as an additional driver for success. To be honnest, I also had more time than ever for this kind of activity.</p>
<p>So I decided to dive in and start my journey as a degen. It turned out to be much more challenging than I had anticipated. I quickly discovered that this world demands an <strong>almost full-time commitment</strong>. It’s a game of <strong>hunting, anticipating, and executing transactions</strong> based on public data. Starting out on <strong>Base</strong> (Coinbase's blockchain), I quickly lost my first few hundred dollars. But I knew the potential was there. After a few weeks, I managed to break even and eventually started seeing small profits.</p>
<p>As the weeks passed, I identified some of my key strengths and weaknesses.</p>
<p><strong>Strengths</strong>:</p>
<ul>
<li>I have a technical background. I can understand the intricate details of projects and deeply master the tools needed to operate effectively in this space.</li>
<li>I have valuable contacts in the industry who’ve generously shared their knowledge and saved me months of trial and error.</li>
</ul>
<p><strong>Weaknesses</strong>:</p>
<ul>
<li>I work solo. Despite those contacts, I can’t rely on them indefinitely. In the degen world, data is money. I can’t expect them to constantly feed me information. Also, being a solo operator means I’m limited by time, whereas groups can distribute the workload and share information more efficiently.</li>
</ul>
<p>That’s when I decided to team up with an old friend who was already well-established in the ecosystem. He was also a dev and had access to valuable information. I, on the other hand, had time and solid technical discipline to support him on various projects.</p>
<p>Together, we began developing a range of analytics and monitoring tools. Without going into too much detail, we built:</p>
<ul>
<li>AlphaGate monitoring</li>
<li>Twitter activity monitors</li>
<li>Factory contract monitors on Base</li>
<li>Onchain OSINT for Twitter/Warpcaster addresses</li>
<li>Onchain Data analytics tools</li>
</ul>
<p>All these projects were just the beginning — a warm-up for something much bigger: diving into <strong>crypto sniping</strong>.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="what-is-sniping">What Is Sniping?<a href="https://clementjuventin.github.io/degen-to-sniper#what-is-sniping" class="hash-link" aria-label="Direct link to What Is Sniping?" title="Direct link to What Is Sniping?">​</a></h2>
<p>By sniping, I mean setting up a system to <strong>quickly buy a cryptocurrency just before it catches a wave of attention</strong>. Imagine a highly anticipated token is about to launch. The market hasn’t priced it in yet, and for a brief moment, it’s undervalued. A sniper aims to e<strong>xploit that gap</strong> — buying at launch before the market corrects.</p>
<p>This practice is often frowned upon — and understandably so. When you buy early with the sole intent to flip for a quick profit, you inevitably hurt retail investors who get in later and might immediately find themselves in the red. Indirectly, this also harms the project itself.</p>
<p>But in the end, the only rule that truly matters is the market. Sniping is a fierce game — full of traps, failures, and intense competition. Being consistently profitable is just as difficult as in any other degen strategy. I’ve had bots miss the entry entirely while friends manually secured massive gains.</p>
<p>In the coming post, I’ll break down some of the sniping techniques I’ve personally developed — along with a few wild anecdotes from the field.</p>
<p><img decoding="async" loading="lazy" alt="Pepe Sniper" src="https://clementjuventin.github.io/assets/images/sad_pepe_sniper-51ed9e00a40251d15cdfa6fe9f47f33d.png" width="1536" height="1024" class="img_Gz92"></p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="sniping-techniques">Sniping Techniques<a href="https://clementjuventin.github.io/degen-to-sniper#sniping-techniques" class="hash-link" aria-label="Direct link to Sniping Techniques" title="Direct link to Sniping Techniques">​</a></h2>
<p>There are many different sniping techniques, and after watching countless token launches, I can confidently say that <strong>no two are ever the same</strong>. Sometimes projects announce the contract on Twitter, other times on Telegram, through a custom website interface, or via a launchpad. You always need to do some investigation to anticipate which sniping strategy has the highest chance of working.</p>
<p>The two sniping techniques that have brought me the most consistent profits are the following.</p>
<h3 class="anchor anchorWithStickyNavbar_m2y2" id="official-claim-sniper">Official Claim Sniper<a href="https://clementjuventin.github.io/degen-to-sniper#official-claim-sniper" class="hash-link" aria-label="Direct link to Official Claim Sniper" title="Direct link to Official Claim Sniper">​</a></h3>
<p>What I call the <em>official claim sniper</em> is a bot that waits for a verified announcement from a trustworthy source before buying the token. Scammers often deploy fake versions of tokens, so without direct confirmation from the project team, jumping in right after deployment is <strong>extremely risky</strong>. Some snipers take that gamble anyway, assuming the potential profits outweigh the possible losses. Personally, I prefer the safer route, even if it means lower profit multipliers — <strong>risk management comes first</strong>.</p>
<p>This type of bot is relatively simple. It only requires a <strong>notification module</strong> and a <strong>transaction module</strong>. A typical architecture I’ve used involves multiple purchase microservices (one per chain), all exposed through a standard API, along with a separate notification microservice configured per opportunity to monitor data and trigger the buy. Hosting both services on the same machine is important to maximize speed.</p>
<p>For example, you could monitor tweets from a memecoin on Avalanche, extract any EVM address with a regex, and buy on whatever DEX has liquidity for that token.</p>
<p>In theory, it sounds simple. But in practice, <strong>there are many potential points of failure</strong> that can ruin the operation.</p>
<p>First, the competition is <strong>brutal</strong>. Everyone’s sniper bots are tuned to fire in the same seconds. The first few moments after a hyped token launch usually show a <strong>huge price spike</strong>. That's because the earliest snipers are buying aggressively, inflating the price before the market stabilizes. If your bot isn’t fast enough, you’ll end up buying at the top and instantly taking a loss as early buyers dump their tokens. You need to strike a balance: be early enough to profit, but not so aggressive that you pay too much in gas or slippage.</p>
<p><img decoding="async" loading="lazy" alt="KAIKU/WETH pair on Base" src="https://clementjuventin.github.io/assets/images/dexscreener.com_KAIKU_WETH_2025-06-06_00-37-34-4912e4f5589ba7bfc348028d7774dc36.png" width="1194" height="611" class="img_Gz92"></p>
<blockquote>
<p>KAIKU/WETH pair on Base (at launch), one candle = 2s (ie block time). Source: <a href="https://dexscreener.com/base/0x4c9498a3f36709ee57b1b7c4b440d8481a1b9f79" target="_blank" rel="noopener noreferrer">Dexscreener</a>.</p>
</blockquote>
<p>Second, the projects themselves have started fighting back. Many view sniping as toxic behavior and implement countermeasures:</p>
<ul>
<li>Obfuscating the contract address (e.g., inserting extra characters or posting it as an image)</li>
<li>Sharing a link to the DEX liquidity pool instead of the contract directly</li>
<li>Using redirect links to custom sites where the contract is revealed</li>
<li>Deploying a fake token first, then warning the community about it</li>
<li>Enabling extreme transaction taxes for the first few seconds to penalize snipers</li>
</ul>
<p>All these traps carry real risks — from simply <strong>missing the opportunity</strong> to <strong>losing your entire investment</strong>. With solid preparation and strategies involving AI or semi-public information feeds, you can sometimes bypass these tricks faster than a human could.</p>
<p>A great example of how dangerous this can get is detailed in <a href="https://tactical.deepwaterstudios.xyz/p/anti-sniper-tech-custom-dex" target="_blank" rel="noopener noreferrer">this excellent post</a>, which explains how anti-bot tactics drained massive amounts from automated snipers. We nearly fell victim ourselves during that period. While I was casually skiing down a slope, waiting for a midday launch, my partner was glued to Twitter. He spotted a Discord message revealing the project team’s plan was to bait snipers with a fake contract. On reflex, he shut down our script. One minute later, a fake contract tweet dropped — and just like that, another sniper lost $75,000.</p>
<p>We were shaken. Even though we weren’t risking that much, it was enough to seriously hurt. Ironically, the competitor immediately re-entered the market with the same amount (what confidence!). In the end, both their bot and ours failed to enter the market, likely due to the a technical hiccup. But the experience was a sobering reminder: even with good tooling and timing, <strong>the risk is never zero</strong>.</p>
<h3 class="anchor anchorWithStickyNavbar_m2y2" id="block-zero-sniper">Block Zero Sniper<a href="https://clementjuventin.github.io/degen-to-sniper#block-zero-sniper" class="hash-link" aria-label="Direct link to Block Zero Sniper" title="Direct link to Block Zero Sniper">​</a></h3>
<p>This technique relies on knowledge of the launchpad that will host the token launch, as well as additional details like the deployer address or token ticker. The idea is to deploy a smart contract that sends a flood of buy transactions every block, attempting to snipe within the same block the liquidity pool is created.</p>
<p>This is possible because many launchpads (like Virtuals) use a factory contract that updates a counter or state variable when a new pair is created. By monitoring that state at high frequency, the sniper can instantly detect a new pool and trigger a buy. Ideally, you filter targets using the ticker or deployer to avoid blindly buying into every new token.</p>
<p>This reminds me of an interesting anecdote from Binance Smart Chain. CZ, Binance’s founder, had announced he would reveal the name of his dog at 16:00 UTC — a seemingly harmless statement that degens took very seriously. Why? Because they knew people would rush to create tokens named after the dog, sparking a frenzy of speculation. One sniper had the brilliant idea to create a smart contract with $10,000, programmed to invest $1,000 into each of the first 10 tokens deployed after 16:00 UTC.</p>
<p>You’ve got to admire that level of confidence — blindly throwing tens of thousands into what could be worthless tokens. But in this case, it paid off. Tree of the ten tokens was related to CZ's post — BROCOLLI (the dog) — made that sniper a millionaire in under 3 seconds. WTF bro what if CZ wanted a beer at 16:00 UTC and posted at 16:01?</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="conclusion">Conclusion<a href="https://clementjuventin.github.io/degen-to-sniper#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>As you've seen, sniping techniques vary wildly, and <strong>the risks are as real as the rewards</strong>. In practice, we only make profitable trades in about 1 out of every 5 attempts. <strong>Most of the time, nothing happens</strong>.</p>
<p>One of the biggest lessons I’ve learned is that technical sophistication alone doesn’t guarantee success. Often, creativity, originality, and unconventional thinking bring more value than raw code. Always keep an open mind and approach every opportunity like a new challenge — because in this game, that's exactly what it is.</p>]]></content>
        <author>
            <name>Clément Juventin</name>
            <uri>https://linkedin.com/in/clément-juventin-ab81841a3/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Opal - Technical Overview]]></title>
        <id>https://clementjuventin.github.io/opal-technical-overview</id>
        <link href="https://clementjuventin.github.io/opal-technical-overview"/>
        <updated>2025-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this article, I’ll dive into the technical underpinnings of the Opal protocol, a project I’ve contributed to extensively. If you haven’t yet read the previous article about Opal, I recommend starting there to better understand the context of what follows.]]></summary>
        <content type="html"><![CDATA[<p>In this article, I’ll dive into the technical underpinnings of the Opal protocol, a project I’ve contributed to extensively. If you haven’t yet read the previous article about Opal, I recommend starting <a href="https://clementjuventin.github.io/opal">there</a> to better understand the context of what follows.</p>
<p>Here, we’ll focus on two of the protocol’s most important smart contracts: the <strong>Omnipool</strong> and the <strong>Reward Manager</strong>.</p>
<p>The Omnipool is the core of the protocol—it’s a single-asset liquidity pool that can dynamically rebalance and reallocate funds across different strategies. It lies at the heart of Opal’s yield-generation mechanism and represents the foundation of the platform's financial logic.</p>
<p>The second contract, the Reward Manager, is one I developed almost entirely independently. Its role is to handle the distribution of rewards to users participating in the Omnipool. I find the mathematical model behind it particularly elegant and effective. While similar systems are likely common and well-studied in DeFi, in this article, we’ll take a closer look at Opal’s unique implementation.</p>]]></content>
        <author>
            <name>Clément Juventin</name>
            <uri>https://linkedin.com/in/clément-juventin-ab81841a3/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Opal - Yield DApp built on top of Balancer]]></title>
        <id>https://clementjuventin.github.io/opal</id>
        <link href="https://clementjuventin.github.io/opal"/>
        <updated>2024-09-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In September 2023, I was invited to lend a hand on an ambitious DeFi project built on Ethereum called Opal. What started as a casual contribution soon evolved into a core team membership. This is the story of how we built and launched the platform.]]></summary>
        <content type="html"><![CDATA[<p>In September 2023, I was invited to lend a hand on an ambitious DeFi project built on <strong>Ethereum</strong> called <strong>Opal</strong>. What started as a casual contribution soon evolved into a <strong>core team membership</strong>. This is the story of how we built and launched the platform.</p>
<p><img decoding="async" loading="lazy" alt="Opal Cover" src="https://clementjuventin.github.io/assets/images/opal_cover-96ed8f824584679203af5a2655780a7a.jpeg" width="2560" height="1440" class="img_Gz92"></p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="opal-explained">Opal Explained<a href="https://clementjuventin.github.io/opal#opal-explained" class="hash-link" aria-label="Direct link to Opal Explained" title="Direct link to Opal Explained">​</a></h2>
<p>Opal is a <strong>DeFi</strong> protocol rooted in the Ethereum ecosystem, specifically leveraging <a href="https://balancer.fi/" target="_blank" rel="noopener noreferrer">Balancer</a> and <a href="https://aura.finance/" target="_blank" rel="noopener noreferrer">Aura Finance</a>. Its core mission is to offer a simple financial system with dynamic yield-generating strategies. The centerpiece of the protocol is the <strong>Omnipool</strong>: a single-asset liquidity pool that dynamically distributes and rebalances liquidity across multiple pools.</p>
<p>Liquidity allocation is governed by a community voting mechanism, powered by the <strong>GEM</strong> token, which represents the protocol's decision-making authority.</p>
<p>Opal draws heavy inspiration from <a href="https://conic.finance/" target="_blank" rel="noopener noreferrer"><strong>Conic Finance</strong></a>, which operates within the Curve ecosystem. For more on the financial mechanics, I’ll defer to the experts — I'm not the one designing the protocol financial logic, but rather the one helping make it a reality. To understand the intricacies, visit <a href="https://docs.opaldefi.xyz/" target="_blank" rel="noopener noreferrer">our documentation</a> and appreciate this flywheel being as beautiful as it is hard to understand.</p>
<p><img decoding="async" loading="lazy" alt="Opal Flywheel" src="https://clementjuventin.github.io/assets/images/opal_flywheel-d2fbd2f972c62231df5c650b0389ee57.png" width="1200" height="675" class="img_Gz92"></p>
<blockquote>
<p>The Opal Flywheel. Source: <a href="https://docs.opaldefi.xyz/" target="_blank" rel="noopener noreferrer">Opal Documentation</a>.</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="the-team">The team<a href="https://clementjuventin.github.io/opal#the-team" class="hash-link" aria-label="Direct link to The team" title="Direct link to The team">​</a></h2>
<p>Our team consisted of four developers and two business/vision managers. We set out to build a complete protocol, production-ready and capable of handling potentially millions in value.</p>
<p>Though I lacked experience, I made up for it with <strong>strong fundamentals</strong> and <strong>relentless motivation</strong>. That’s how my Opal journey began — a bold, real-world challenge I was eager to take on.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="development-journey">Development Journey<a href="https://clementjuventin.github.io/opal#development-journey" class="hash-link" aria-label="Direct link to Development Journey" title="Direct link to Development Journey">​</a></h2>
<p>Over several months, we shaped the protocol and defined the requirements for the first version. I was assigned to the <strong>Reward Manager</strong>, a crucial module responsible for distributing rewards from the Omnipools to users. It was a tricky component, and the initial team had struggled with it, which is why I was brought on board.</p>
<p>To be honest, I struggled too. I’ll dive into the technical and mathematical complexity of this module in a later post.</p>
<p>At this stage, Opal was still a side project for everyone, so the relatively slow development pace suited us. But that was about to change.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="fundraising-private--public-rounds">Fundraising: Private &amp; Public Rounds<a href="https://clementjuventin.github.io/opal#fundraising-private--public-rounds" class="hash-link" aria-label="Direct link to Fundraising: Private &amp; Public Rounds" title="Direct link to Fundraising: Private &amp; Public Rounds">​</a></h2>
<p>While development was underway, the business team was busy pitching to investors and organizing a private seed round. I wasn’t deeply involved in this phase, but word was that it went well — we secured commitments without giving up too many tokens, and <strong>early signs from the market were encouraging</strong>.</p>
<p>Our <a href="https://x.com/opaldefi" target="_blank" rel="noopener noreferrer">Twitter</a> and Discord communities started <strong>gaining traction</strong>, adding pressure on the dev team to finalize the protocol.</p>
<p>The funds raised during the private seed were used to ramp up marketing: promo videos, contests, influencer campaigns — all in preparation for the public round.</p>
<p>The public raise was hosted on <a href="https://app.fjordfoundry.com/token-sales/0x1F272Ab2BDc512cb59e7b49485eFE16d2d7F9ffa" target="_blank" rel="noopener noreferrer">Fjord Foundry</a>, a platform tailored for such events. The response was phenomenal — we raised $1.58 million. I could hardly believe it myself.</p>
<p><img decoding="async" loading="lazy" alt="Opal fundraising metrics" src="https://clementjuventin.github.io/assets/images/opal_fundraise-10d7df6c066e039cf1390e8b6e1dadcf.png" width="1241" height="448" class="img_Gz92"></p>
<blockquote>
<p>Opal fundraising metrics. Source: <a href="https://app.fjordfoundry.com/token-sales/0x1F272Ab2BDc512cb59e7b49485eFE16d2d7F9ffa" target="_blank" rel="noopener noreferrer">Fjord Foundry</a>.</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="delivering-on-expectations">Delivering on Expectations<a href="https://clementjuventin.github.io/opal#delivering-on-expectations" class="hash-link" aria-label="Direct link to Delivering on Expectations" title="Direct link to Delivering on Expectations">​</a></h2>
<p>With a successful raise behind us, the pressure was on. Development needed to accelerate. Looking back, this period was rough — we clearly underestimated the time required to finalize the product.</p>
<p>We went from working 4–6 hours a week to over 20 hours per week, all while juggling full-time jobs. We rushed through two audits, each with just five days to fix reported issues. The first audit revealed more flaws than I expected, which was nerve-racking. But if you're in a similar situation — <strong>don’t panic</strong>. It's normal, and you’ll likely go through more audits to patch things up.</p>
<p>The machine was running at full speed. We were in the final stretch.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="opal-in-production">Opal in Production<a href="https://clementjuventin.github.io/opal#opal-in-production" class="hash-link" aria-label="Direct link to Opal in Production" title="Direct link to Opal in Production">​</a></h2>
<p>They say childbirth is one of the most painful human experiences. I won’t compare directly, but launching Opal felt like a drawn-out labor with complications.</p>
<p>What was supposed to take hours ended up taking a full week due to last-minute issues. One integration test was producing inexplicable results. Exhaustion and stress didn’t help. We delayed the launch to debug the issue, which turned out to be a decimal misconfiguration. Not catastrophic, but enough to <strong>shake our confidence</strong> just hours before going live.</p>
<p>Still, we launched. TVL started rising, eventually hitting <strong>$8 million—a historic high</strong>.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="the-downside">The Downside<a href="https://clementjuventin.github.io/opal#the-downside" class="hash-link" aria-label="Direct link to The Downside" title="Direct link to The Downside">​</a></h2>
<p>Post-launch, Opal faced criticism. The community expected a more polished product with more features. We had delivered everything planned for V1, so I was surprised. But it may have been more about market conditions and a separate incident with MEV Capital.</p>
<p>MEV Capital, one of our biggest backers, had contributed ~80% of our TVL. They decided to withdraw a large amount of the protocol's liquidity without warning. Unfortunately, they encountered a bug in the DApp's slippage logic on one of the Omnipools. Without simulating the transaction or using a MEV blocker, they suffered an instant and irreversible <strong>six-figure MEV loss</strong>.</p>
<p>Tensions rose when the Opal team chose not to assume responsibility. That day, our TVL dropped significantly, and the protocol's reputation took a major hit.</p>
<p>It's hard to accept that the future of the protocol hinged on a small, avoidable mistake—something that could’ve been prevented in countless ways, both on our side and MEV Capital’s. All I can say is: it happened, and it cost us dearly.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="redemption-arc">Redemption Arc<a href="https://clementjuventin.github.io/opal#redemption-arc" class="hash-link" aria-label="Direct link to Redemption Arc" title="Direct link to Redemption Arc">​</a></h2>
<p>In the months that followed, we managed to rebuild some momentum. We secured a grant from Balancer, added new features, and brought TVL back to around $600K.</p>
<p>We're currently trying to re-energize the project with an airdrop campaign, community incentives, and feature updates.</p>
<p>The project still suffers from its damaged reputation, and the omnipool model has lost some steam — especially after Conic Finance started to talk about shutting down their protocol.</p>
<p>But we're still optimistic. Our product has been battle-tested, and we remain committed to improving and promoting it. With continued effort, Opal might just win people over again.</p>]]></content>
        <author>
            <name>Clément Juventin</name>
            <uri>https://linkedin.com/in/clément-juventin-ab81841a3/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tackling Rate Limiting, One of My First Challenges at Cede Labs]]></title>
        <id>https://clementjuventin.github.io/request-throttler</id>
        <link href="https://clementjuventin.github.io/request-throttler"/>
        <updated>2024-04-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Cede Labs’ SDK is designed to support any number of centralized exchange accounts, allowing applications or users to query data from several CEXs seamlessly. However, this flexibility exposed a serious issue: API rate limits.]]></summary>
        <content type="html"><![CDATA[<p>Cede Labs’ SDK is designed to support any number of centralized exchange accounts, allowing applications or users to query data from several CEXs seamlessly. However, this flexibility exposed a serious issue: <strong>API rate limits</strong>.</p>
<p>Over the past few weeks at <strong>Cede Labs</strong>, I’ve been diving deep into the codebase, getting familiar with the SDK, and preparing myself for the complex technical challenges ahead. One of the first major problems I encountered — and helped solve — was <strong>rate limiting across multiple centralized exchanges (CEXs)</strong>.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="the-problem-managing-rate-limits-in-a-multi-cex-world">The Problem: Managing Rate Limits in a Multi-CEX World<a href="https://clementjuventin.github.io/request-throttler#the-problem-managing-rate-limits-in-a-multi-cex-world" class="hash-link" aria-label="Direct link to The Problem: Managing Rate Limits in a Multi-CEX World" title="Direct link to The Problem: Managing Rate Limits in a Multi-CEX World">​</a></h2>
<p>Cede Labs’ SDK is designed to support any number of centralized exchange accounts, allowing applications or users to query data from several CEXs seamlessly. However, this flexibility exposed a serious issue: <strong>API rate limits</strong>.</p>
<p>The tricky part is that <strong>rate limiting strategies vary widely between exchanges</strong>. Some enforce limits by:</p>
<ul>
<li>IP address</li>
<li>API key</li>
<li>Master/sub-account hierarchies</li>
<li>Or even combinations of all three</li>
</ul>
<p>We observed this firsthand through our <strong>Chrome extension</strong>, which integrates the SDK to interact with multiple exchanges. With many CEX accounts active simultaneously, we were quickly exhausting rate limits, resulting in <strong>slowness, API errors, and buggy behavior</strong>.</p>
<p>Clearly, we needed a robust, centralized system to handle API throttling across all exchange instances.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="the-solution-building-a-shared-request-throttler">The Solution: Building a Shared Request Throttler<a href="https://clementjuventin.github.io/request-throttler#the-solution-building-a-shared-request-throttler" class="hash-link" aria-label="Direct link to The Solution: Building a Shared Request Throttler" title="Direct link to The Solution: Building a Shared Request Throttler">​</a></h2>
<p>Our SDK uses <strong>CCXT</strong>, a widely adopted library that simplifies communication with CEX APIs. CCXT conveniently includes built-in metadata about rate limits — including cost calculations and endpoint-specific constraints — which became the foundation for our fix.</p>
<p>I built a component called the <strong>Request Throttler</strong> to manage all outgoing requests. This module:</p>
<ul>
<li>Runs a continuous loop, processing a queue of API requests</li>
<li>Delays or batches calls based on calculated rate limits</li>
<li>Shares throttling logic between all exchange instances tied to the same CEX</li>
<li>Supports custom priorities to fast-track high-importance requests</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="the-code-a-deep-dive-into-the-request-throttler">The Code: A Deep Dive into the Request Throttler<a href="https://clementjuventin.github.io/request-throttler#the-code-a-deep-dive-into-the-request-throttler" class="hash-link" aria-label="Direct link to The Code: A Deep Dive into the Request Throttler" title="Direct link to The Code: A Deep Dive into the Request Throttler">​</a></h2>
<p>Below is a simplified version of the throttler's main loop. For readability, I’ve omitted queue-empty handling (i.e., when <code>this.getNext()</code> returns <code>null</code>).</p>
<div class="language-typescript codeBlockContainer_AfQF theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_oi8h"><pre tabindex="0" class="prism-code language-typescript codeBlock_o8hW thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_kW6b"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">loop</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> lastTimestamp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">now</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">running</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> resolver</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cost</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rejecter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> timestamp</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> expireInterval </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getNext</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tokens </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timestamp </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> expireInterval </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">now</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">rejecter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Request expired'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tokens </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> cost</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">resolver</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token builtin">Promise</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">resolve</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sleep</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">delay</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">now</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> elapsed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lastTimestamp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            lastTimestamp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> tokens </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tokens </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">refillRate </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> elapsed</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tokens </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Math</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">min</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">capacity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_m2y2" id="key-concepts">Key Concepts<a href="https://clementjuventin.github.io/request-throttler#key-concepts" class="hash-link" aria-label="Direct link to Key Concepts" title="Direct link to Key Concepts">​</a></h4>
<ul>
<li><code>this.tokens</code> represents the available request "budget". It's reduced by the <code>cost</code> of each request.</li>
<li>If <code>this.tokens</code> is below 0, the system will pause (<code>sleep</code>) and <strong>refill</strong> tokens based on elapsed time and a configured <strong>refill rate</strong>.</li>
<li>If tokens are available (i.e., <code>&gt;= 0</code>), the request is executed <strong>only if it hasn't expired</strong> (based on <code>timestamp + expireInterval</code>).</li>
<li>The line <code>await Promise.resolve();</code> is a <strong>context switch</strong> — it gives other asynchronous tasks a chance to execute, which helps avoid blocking the event loop in JavaScript.</li>
<li><strong>Token refill logic</strong> happens after the delay and simulates a "leaky bucket" or "token bucket" algorithm, a common strategy in rate-limiting systems.</li>
</ul>
<p>This loop ensures that all API requests respect the configured rate limits by dynamically adjusting based on real-time usage and availability.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="prioritization-and-background-work">Prioritization and Background Work<a href="https://clementjuventin.github.io/request-throttler#prioritization-and-background-work" class="hash-link" aria-label="Direct link to Prioritization and Background Work" title="Direct link to Prioritization and Background Work">​</a></h2>
<p>In practice, our SDK performs a lot of <strong>background tasks</strong>, such as:</p>
<ul>
<li>Balance fetching</li>
<li>Historical trade retrieval</li>
<li>Status checks</li>
</ul>
<p>These operations are necessary but can be expensive in terms of API cost. So, I implemented a <strong>priority system</strong>: important requests (like user-triggered actions) are associated to high priority while background tasks are associated to low priority.</p>
<p>This ensures faster user experiences without breaking rate limits or starving essential tasks.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="the-hard-part-rate-limit-discovery">The Hard Part: Rate Limit Discovery<a href="https://clementjuventin.github.io/request-throttler#the-hard-part-rate-limit-discovery" class="hash-link" aria-label="Direct link to The Hard Part: Rate Limit Discovery" title="Direct link to The Hard Part: Rate Limit Discovery">​</a></h2>
<p>The most difficult aspect wasn’t writing the throttler logic itself — it was understanding and standardizing <strong>how each exchange handles rate limits</strong>.</p>
<ul>
<li>Many rate-limiting rules are hidden, sometimes undocumented and in worse cases not aligned with the official documentation</li>
<li>CCXT’s built-in cost definitions were often outdated</li>
<li>Some CEXs change behavior depending on the account type or endpoint</li>
</ul>
<p>I had to manually test, validate, and correct the API cost values for several exchanges, updating the SDK accordingly.</p>
<p>It also took careful work to <strong>share a throttler</strong> across multiple CEX instances (i.e., multiple ccxt objects) since each has unique constraints, such as caching behavior or read/write permission separation.</p>
<p>For context:</p>
<blockquote>
<p>A CEX instance in our system is a <code>ccxt</code> object tied to a specific API key and access rights. Each instance needs to respect its rate limits but also coordinate with other instances for the same exchange.</p>
</blockquote>
<p>That’s where the Request Throttler comes in — it sits above the instances and coordinates them like air traffic control.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="looking-ahead">Looking Ahead<a href="https://clementjuventin.github.io/request-throttler#looking-ahead" class="hash-link" aria-label="Direct link to Looking Ahead" title="Direct link to Looking Ahead">​</a></h2>
<p>This was a great first challenge at Cede Labs. It pushed me to go beyond just writing code — I had to understand CEXs inside out, map inconsistencies, and design a system that works under real-world constraints.</p>
<p>There’s still a lot to build and while this system highly reduced our rate limit issues, there is still a lot of improvements to make to reach our goals.</p>
<p>I’m proud of how this first technical hurdle turned into a solid foundation for more scalable and reliable SDK behavior.</p>
<p>More to come soon!</p>]]></content>
        <author>
            <name>Clément Juventin</name>
            <uri>https://linkedin.com/in/clément-juventin-ab81841a3/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[I'm Joining Cede Labs as a Full-Stack Developer!]]></title>
        <id>https://clementjuventin.github.io/welcome-to-cede-labs</id>
        <link href="https://clementjuventin.github.io/welcome-to-cede-labs"/>
        <updated>2023-03-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’m thrilled to announce that I’m joining Cede Labs as a Full-Stack Developer!]]></summary>
        <content type="html"><![CDATA[<p>I’m thrilled to announce that I’m joining Cede Labs as a Full-Stack Developer!</p>
<p>Cede Labs is a Paris-based French startup building the missing bridge between <strong>centralized exchanges (CEXs)</strong> and the <strong>decentralized finance (DeFi) ecosystem</strong>. Their mission is to create seamless connectivity between Web2 and Web3 financial systems — and I’m excited to become a part of that journey.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="what-cede-labs-does">What Cede Labs does<a href="https://clementjuventin.github.io/welcome-to-cede-labs#what-cede-labs-does" class="hash-link" aria-label="Direct link to What Cede Labs does" title="Direct link to What Cede Labs does">​</a></h2>
<p>At its core, Cede Labs offers a powerful Software Development Kit (SDK) that enables developers to interact with over 10 major centralized exchanges (<em>Binance, Bybit, Coinbase, etc.</em>) and more than 1,000 supported blockchains. With this SDK, developers can:</p>
<ul>
<li>Retrieve account and trading history</li>
<li>Fetch balances</li>
<li>Execute trades</li>
<li>Deposit and withdraw assets</li>
</ul>
<p>But that's not all. The team is also building a Chrome extension wallet that integrates directly with their SDK, providing a smooth and user-friendly interface. It enables users to interact with DeFi applications just like they would with a standard Web3 wallet like MetaMask — but with deeper CEX capabilities under the hood.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="why-this-role-excites-me">Why this Role Excites Me<a href="https://clementjuventin.github.io/welcome-to-cede-labs#why-this-role-excites-me" class="hash-link" aria-label="Direct link to Why this Role Excites Me" title="Direct link to Why this Role Excites Me">​</a></h2>
<p>This opportunity marks my <strong>official entry into the Web3 industry</strong>, something I've been eager to pursue. Even more exciting, it allows me to continue applying my experience in <strong>traditional finance development</strong>, combining the best of both worlds.</p>
<p>The potential use cases for the SDK are vast, and the roadmap ahead is full of innovation — from enhanced trading features like <strong>futures support</strong> to <strong>onboarding new exchanges</strong>. There's a lot to build, and I'm thrilled to contribute.</p>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="what-ill-be-working-on">What I'll Be Working On<a href="https://clementjuventin.github.io/welcome-to-cede-labs#what-ill-be-working-on" class="hash-link" aria-label="Direct link to What I'll Be Working On" title="Direct link to What I'll Be Working On">​</a></h2>
<p>As a full-stack developer at Cede Labs, my role spans across both frontend and backend, including:</p>
<ul>
<li>Developing the Chrome extension UI and adding key features</li>
<li>Contributing to the SDK, enhancing its capabilities and exchange support</li>
<li>Building and maintaining a NestJS API</li>
<li>Managing infrastructure deployments on AWS using Terraform</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_m2y2" id="looking-ahead">Looking Ahead<a href="https://clementjuventin.github.io/welcome-to-cede-labs#looking-ahead" class="hash-link" aria-label="Direct link to Looking Ahead" title="Direct link to Looking Ahead">​</a></h2>
<p>There’s a ton of exciting work ahead, and I can’t wait to share what we’re building at Cede Labs. I’m looking forward to learning from the brilliant team and bringing my own contributions to the table. Stay tuned — more updates coming soon!</p>]]></content>
        <author>
            <name>Clément Juventin</name>
            <uri>https://linkedin.com/in/clément-juventin-ab81841a3/</uri>
        </author>
    </entry>
</feed>